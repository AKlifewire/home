import { Stack, StackProps, aws_ssm as ssm, aws_s3 as s3, Tags, CfnOutput } from 'aws-cdk-lib';
import { Construct } from 'constructs';

interface SSMParameterStackProps extends StackProps {
  environment: string;
}

interface ParameterProps {
  // Auth Parameters
  userPoolId?: string;
  userPoolClientId?: string;
  identityPoolId?: string;
  
  // API Parameters
  graphqlEndpoint?: string;
  graphqlApiId?: string;
  
  // Storage Parameters
  s3Bucket?: s3.IBucket;
  otaBucket?: s3.IBucket;
  logsBucket?: s3.IBucket;
  
  // IoT Parameters
  iotEndpoint?: string;
  iotProvisioningTemplateName?: string;
  iotPolicyName?: string;
  
  // UI JSON Parameters
  uiJsonBucket?: string;
  uiJsonLambdaArn?: string;
  
  // Analytics Parameters
  timestreamDatabase?: string;
  timestreamTable?: string;
  
  // Payment Parameters
  stripeSecretKey?: string;
  stripeWebhookSecret?: string;
  
  // Monitoring Parameters
  alarmTopicArn?: string;
}

export class SSMParameterStack extends Stack {
  private readonly envPrefix: string;
  private readonly parameters: Map<string, ssm.IStringParameter> = new Map();

  constructor(scope: Construct, id: string, props: SSMParameterStackProps) {
    super(scope, id, props);

    this.envPrefix = `/${props.environment}`;

    // Optional Tagging
    Tags.of(this).add('Module', 'SSMParameters');
    Tags.of(this).add('Environment', props.environment);
  }

  public addParameters(params: ParameterProps): void {
    // Auth Parameters
    if (params.userPoolId) {
      this.createParam('auth/userPoolId', params.userPoolId);
    }
    if (params.userPoolClientId) {
      this.createParam('auth/userPoolClientId', params.userPoolClientId);
    }
    if (params.identityPoolId) {
      this.createSecureParam('auth/identityPoolId', params.identityPoolId);
    }

    // GraphQL API Parameters
    if (params.graphqlEndpoint) {
      this.createParam('api/graphqlEndpoint', params.graphqlEndpoint);
    }
    if (params.graphqlApiId) {
      this.createParam('api/graphqlApiId', params.graphqlApiId);
    }

    // UI S3 Bucket
    if (params.s3Bucket) {
      this.createParam('ui/s3BucketName', params.s3Bucket.bucketName);
      this.createParam('ui/s3BucketUrl', `https://${params.s3Bucket.bucketName}.s3.${this.region}.amazonaws.com`);
      this.createParam('ui/s3BucketRegionalDomainName', `${params.s3Bucket.bucketName}.s3.${this.region}.amazonaws.com`);
    }

    // OTA Firmware Bucket
    if (params.otaBucket) {
      this.createParam('ota/bucketName', params.otaBucket.bucketName);
      this.createParam('ota/bucketUrl', `https://${params.otaBucket.bucketName}.s3.${this.region}.amazonaws.com`);
    }

    // Logs Bucket
    if (params.logsBucket) {
      this.createParam('logs/bucketName', params.logsBucket.bucketName);
    }

    // IoT Parameters
    if (params.iotEndpoint) {
      this.createParam('iot/endpoint', params.iotEndpoint);
    }
    if (params.iotProvisioningTemplateName) {
      this.createParam('iot/provisioningTemplateName', params.iotProvisioningTemplateName);
    }
    if (params.iotPolicyName) {
      this.createParam('iot/policyName', params.iotPolicyName);
    }

    // UI JSON Parameters
    if (params.uiJsonBucket) {
      this.createParam('ui-json/bucketName', params.uiJsonBucket);
    }
    if (params.uiJsonLambdaArn) {
      this.createParam('ui-json/lambdaArn', params.uiJsonLambdaArn);
    }

    // Analytics Parameters
    if (params.timestreamDatabase) {
      this.createParam('analytics/timestreamDatabase', params.timestreamDatabase);
    }
    if (params.timestreamTable) {
      this.createParam('analytics/timestreamTable', params.timestreamTable);
    }

    // Payment Parameters
    if (params.stripeSecretKey) {
      this.createSecureParam('payment/stripeSecretKey', params.stripeSecretKey);
    }
    if (params.stripeWebhookSecret) {
      this.createSecureParam('payment/stripeWebhookSecret', params.stripeWebhookSecret);
    }

    // Monitoring Parameters
    if (params.alarmTopicArn) {
      this.createParam('monitoring/alarmTopicArn', params.alarmTopicArn);
    }
  }

  private createParam(name: string, value: string): ssm.StringParameter {
    const param = new ssm.StringParameter(this, `Param-${name}`, {
      parameterName: `${this.envPrefix}/${name}`,
      stringValue: value,
      tier: ssm.ParameterTier.STANDARD,
      description: `Generated by CDK for ${name}`
    });
    
    this.parameters.set(name, param);
    
    new CfnOutput(this, `Output-${name.replace(/\//g, '-')}`, {
      value,
      description: `SSM Parameter for ${name}`,
      exportName: `${this.stackName}-${name.replace(/\//g, '-')}`,
    });
    
    return param;
  }
  
  private createSecureParam(name: string, value: string): ssm.IStringParameter {
    // Use native AWS CloudFormation properties to create a SecureString
    const param = new ssm.CfnParameter(this, `SecureParam-${name}`, {
      name: `${this.envPrefix}/${name}`,
      value: value,
      tier: 'Standard',
      type: 'SecureString',
      description: `Generated by CDK for ${name}`
    });
    
    // Create a wrapper StringParameter to maintain the same interface
    const stringParam = ssm.StringParameter.fromSecureStringParameterAttributes(
      this,
      `Param-${name}`,
      {
        parameterName: `${this.envPrefix}/${name}`,
        version: 1
      }
    );
    
    this.parameters.set(name, stringParam);
    return stringParam;
  }
  
  public getParameterMap(): Map<string, ssm.IStringParameter> {
    return this.parameters;
  }
}